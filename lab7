#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <limits>

using namespace std;

class Solution {
public:
    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int k) {
        int n = quality.size();
        vector<pair<double, int>> workers; 

        
        for (int i = 0; i < n; ++i) {
            workers.push_back({(double)wage[i] / quality[i], quality[i]});
        }

        // Сортируем работников
        sort(workers.begin(), workers.end());

        double minCost = numeric_limits<double>::max(); // Минимальная стоимость
        double totalQuality = 0; 
        priority_queue<int> maxHeap; 

        for (const auto& worker : workers) {
            double ratio = worker.first; 
            int q = worker.second; 

            // Добавляем качество в кучу
            maxHeap.push(q);
            totalQuality += q;

            // Если количество работников превышает k, удаляем работника с наибольшим качеством
            if (maxHeap.size() > k) {
                totalQuality -= maxHeap.top();
                maxHeap.pop();
            }

            // Если у нас есть ровно k работников, вычисляем стоимость
            if (maxHeap.size() == k) {
                minCost = min(minCost, totalQuality * ratio);
            }
        }

        return minCost;
    }
};
